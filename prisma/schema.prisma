datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model AppUser {
  id          String       @id @default(uuid())
  email       String
  password    String

  schoolId    String?
  School      School?      @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  nom         String?
  prenom      String?
  telephone   String?
  profession  String?
  biographie  String?
  adresse     String?
  createdAt   DateTime     @default(now())

  @@unique([schoolId, email])

  userRoles   UserRole[]
  children    Student[]    @relation("ParentChildren")
  classes     ClasseProfesseur[]
  cours       Cours[]      @relation("ProfesseurCours")
  disciplines Discipline[] @relation("TeacherDisciplines")
}

model Role {
  id        String    @id @default(uuid())
  name      String    @unique

  userRoles UserRole[]
}

model UserRole {
  userId String
  roleId String

  user AppUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model School {
  id        String     @id @default(uuid())
  name      String     @unique
  adresse   String?
  telephone String?
  email     String?
  siteWeb   String?

  students  Student[]
  classes   Classe[]
  users     AppUser[]
  cours     Cours[]
}

model Student {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  nom          String
  prenom       String
  dateOfBirth  DateTime
  abscence     Int
  retards      Int
  moyenne      Float

  schoolId     String?
  School       School?    @relation(fields: [schoolId], references: [id], onDelete: SetNull)

  parentId     String?
  parent       AppUser?   @relation("ParentChildren", fields: [parentId], references: [id], onDelete: SetNull)

  classeId     String
  classe       Classe     @relation(fields: [classeId], references: [id], onDelete: Cascade)

  notes        Note[]
  attendances   StudentAttendance[]
}

model StudentAttendance {
  id           String    @id @default(uuid())
  studentId    String
  disciplineId String
  type         String
  date         DateTime

  student    Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  discipline Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
}

model Classe {
  id          String            @id @default(uuid())
  createdAt   DateTime          @default(now())
  niveau      String
  nom         String

  schoolId    String?
  School      School?           @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  students    Student[]
  professeurs ClasseProfesseur[]
  notes       Note[]
  cours       Cours[]
}

model ClasseProfesseur {
  classeId      String
  professeurId  String

  classe        Classe   @relation(fields: [classeId], references: [id], onDelete: Cascade)
  professeur    AppUser  @relation(fields: [professeurId], references: [id], onDelete: Cascade)

  @@id([classeId, professeurId])
}

model Discipline {
  id         String    @id @default(uuid())
  name       String    @unique

  cours      Cours[]   @relation("DisciplineCours")
  notes      Note[]    @relation("DisciplineNotes")
  teachers   AppUser[] @relation("TeacherDisciplines")
  attendances StudentAttendance[]
}

model Note {
  id            String     @id @default(uuid())
  createdAt     DateTime   @default(now())

  classeId      String
  classe        Classe     @relation(fields: [classeId], references: [id], onDelete: Cascade)

  type          String
  devoir        Boolean
  note          Float
  date          DateTime
  appreciation  String?
  coefficient   Float

  disciplineId  String
  discipline    Discipline @relation("DisciplineNotes", fields: [disciplineId], references: [id], onDelete: Cascade)

  studentId     String
  student       Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Cours {
  id            String     @id @default(uuid())
  createdAt     DateTime   @default(now())

  disciplineId  String
  discipline    Discipline @relation("DisciplineCours", fields: [disciplineId], references: [id], onDelete: Cascade)

  jour          String
  heure         String

  professeurId  String
  professeur    AppUser    @relation("ProfesseurCours", fields: [professeurId], references: [id], onDelete: Cascade)

  classeId      String
  classe        Classe     @relation(fields: [classeId], references: [id], onDelete: Cascade)

  schoolId      String
  School        School     @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

